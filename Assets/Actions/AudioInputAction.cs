//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Actions/AudioInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AudioInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AudioInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AudioInputAction"",
    ""maps"": [
        {
            ""name"": ""Audio"",
            ""id"": ""656181df-e416-4666-b326-9be41a04adc5"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Value"",
                    ""id"": ""e0f3ec7c-3831-4b9d-9f05-d626c5cc5900"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Value"",
                    ""id"": ""26f3e7f2-4220-4188-bb83-390ca6cfcf84"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a019efd7-5103-4b11-aa79-ba4b54a33611"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9f2a5dc-c0a6-4861-9608-37bea2a444f6"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Audio
        m_Audio = asset.FindActionMap("Audio", throwIfNotFound: true);
        m_Audio_Play = m_Audio.FindAction("Play", throwIfNotFound: true);
        m_Audio_Pause = m_Audio.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Audio
    private readonly InputActionMap m_Audio;
    private IAudioActions m_AudioActionsCallbackInterface;
    private readonly InputAction m_Audio_Play;
    private readonly InputAction m_Audio_Pause;
    public struct AudioActions
    {
        private @AudioInputAction m_Wrapper;
        public AudioActions(@AudioInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_Audio_Play;
        public InputAction @Pause => m_Wrapper.m_Audio_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Audio; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AudioActions set) { return set.Get(); }
        public void SetCallbacks(IAudioActions instance)
        {
            if (m_Wrapper.m_AudioActionsCallbackInterface != null)
            {
                @Play.started -= m_Wrapper.m_AudioActionsCallbackInterface.OnPlay;
                @Play.performed -= m_Wrapper.m_AudioActionsCallbackInterface.OnPlay;
                @Play.canceled -= m_Wrapper.m_AudioActionsCallbackInterface.OnPlay;
                @Pause.started -= m_Wrapper.m_AudioActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_AudioActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_AudioActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_AudioActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Play.started += instance.OnPlay;
                @Play.performed += instance.OnPlay;
                @Play.canceled += instance.OnPlay;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public AudioActions @Audio => new AudioActions(this);
    public interface IAudioActions
    {
        void OnPlay(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
